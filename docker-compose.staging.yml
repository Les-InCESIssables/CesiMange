services:
    # Microservice user-service en staging (utilise MongoDB)
    user-service:
        build:
            context: .
            dockerfile: platforms/microservices/user-service/Dockerfile
        container_name: user-service-staging
        ports:
            - '4002:4002'
        environment:
            - NODE_ENV=staging
            - PORT=4002
            - CONNECTION_STRING=mongodb://mongodb-user-staging:27017/user_db
        networks:
            - api_network

    # Microservice restaurant-service en staging (utilise MongoDB)
    restaurant-service:
        build:
            context: .
            dockerfile: platforms/microservices/restaurant-service/Dockerfile
        container_name: restaurant-service-staging
        ports:
            - '4003:4003'
        environment:
            - NODE_ENV=staging
            - PORT=4003
            - CONNECTION_STRING=mongodb://mongodb-restaurant-staging:27017/restaurant_db
        networks:
            - api_network

    # Exemple d'un microservice utilisant SQL Server (par exemple, auth-service)
    # auth-service:
    #    build:
    #        context: .
    #        dockerfile: platforms/microservices/auth-service/Dockerfile
    #    container_name: auth-service-staging
    #    ports:
    #        - '4004:4004'
    #    environment:
    #        - NODE_ENV=staging
    #        - PORT=4004
    #        - CONNECTION_STRING=Server=sqlserver-auth-staging:1433;Database=auth_db;User Id=sa;Password=YourStrong!Passw0rd;
    #    networks:
    #        - api_network

    # API Gateway Nginx pour staging
    nginx-gateway:
        build:
            context: .
            dockerfile: platforms/nginx-gateway/Dockerfile
        container_name: nginx-gateway-staging
        ports:
            - '8080:80'
        environment:
            - NGINX_PORT=8080
            - NGINX_HOST=staging.example.com
        networks:
            - api_network

    # Service MongoDB pour user-service en staging
    mongodb-user-staging:
        image: mongo:latest
        container_name: mongodb-user-staging
        ports:
            - '27017:27017'
        volumes:
            - type: bind
              source: ./platforms/data/mongodb/user-service
              target: /data/db
        networks:
            - api_network

    # Service MongoDB pour restaurant-service en staging
    mongodb-restaurant-staging:
        image: mongo:latest
        container_name: mongodb-restaurant-staging
        ports:
            - '27018:27017'
        volumes:
            - type: bind
              source: ./platforms/data/mongodb/restaurant-service
              target: /data/db
        networks:
            - api_network

    # Service SQL Server pour auth-service en staging
    # sqlserver-auth-staging:
    #    image: mcr.microsoft.com/mssql/server:2019-latest
    #    container_name: sqlserver-auth-staging
    #    environment:
    #        - SA_PASSWORD=YourStrong!Passw0rd
    #        - ACCEPT_EULA=Y
    #    ports:
    #        - '1433:1433'
    #    volumes:
    #        - type: bind
    #          source: ./platforms/data/sqlserver/auth-service
    #          target: /var/opt/mssql
    #    networks:
    #        - api_network

networks:
    api_network:
        driver: bridge
