name: CI/CD Pipeline

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  # -------------------------------------------------------------------
  # JOB 1 : Build des projets NPM dans l'ordre requis
  # -------------------------------------------------------------------
  build-npm-in-order:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.14"

      # 1. Build data-access-layer
      - name: Build data-access-layer
        run: |
          cd platforms/services/data-access-layer
          npm ci
          npm run build

      # 2. Build base-classes (qui dépend de data-access-layer)
      - name: Build base-classes
        run: |
          cd platforms/services/base-classes
          npm ci
          npm run build

      # 3. Build ModelGenerator (si nécessaire)
      - name: Build ModelGenerator
        run: |
          cd platforms/services/ModelGenerator
          npm ci
          npm run build

      # 4. Build user-service
      - name: Build user-service
        run: |
          cd platforms/microservices/user-service
          npm ci
          npm run build

      # 5. Build restaurant-service
      - name: Build restaurant-service
        run: |
          cd platforms/microservices/restaurant-service
          npm ci
          npm run build

  # -----------------------------
  # JOB 2 : Build des apps Yarn (front-end)
  # -----------------------------
  build-yarn:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ "customer-final" ]
        node-version: ["22.14"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js for Yarn
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          cache-dependency-path: "yarn.lock"

      - name: Yarn install (monorepo)
        run: yarn install --frozen-lockfile

      - name: Build app components
        run: |
          components=(proxy local-middleware front)
          for component in "${components[@]}"; do
            componentDir="apps/${{ matrix.app }}/$component"
            if [ -d "$componentDir" ]; then
              echo "Building $component for app ${{ matrix.app }}..."
              cd "$componentDir"
              yarn build
              cd - > /dev/null
            else
              echo "Directory $componentDir does not exist, skipping."
            fi
          done
