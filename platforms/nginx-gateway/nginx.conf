# /etc/nginx/nginx.conf

# Définition de l’utilisateur Nginx et du nombre de processus de travail.
user nginx;
worker_processes auto;
pid /var/run/nginx.pid;
error_log /var/log/nginx/error.log warn;

events {
    # Nombre maximum de connexions simultanées par processus.
    worker_connections 1024;
}

http {
    # Inclusion des types MIME et définition du type par défaut.
    include       mime.types;
    default_type  application/octet-stream;

    # Format et chemin du fichier de log.
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;

    # Optimisations de transfert.
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    server_tokens off;             # Masquer la version de Nginx pour la sécurité.
    client_max_body_size 10M;       # Limiter la taille des requêtes entrantes.

    # Activation et configuration de gzip.
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Limitation du débit par adresse IP (méthode classique).
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    # Sécurisation via des headers HTTP.
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";

    # Configuration du groupe d'upstream pour le load balancing.
    upstream user_service {
        # La répartition se fait par défaut en round-robin.
        server host.docker.internal:4002;
        server host.docker.internal:4003;
        keepalive 16;  # Permet de maintenir des connexions persistantes.
    }

    server {
        listen 80;
        server_name localhost;

        # Endpoint pour vérifier la santé de l'API Gateway.
        location /health {
            access_log off;
            return 200 "OK\n";
        }

        # Bloc de routage pour le service utilisateur.
        location /users {
            # Application du rate limiting par IP.
            limit_req zone=api_limit burst=20 nodelay;

            # Réécriture de l'URI :
            # Exemple : /users/123 devient /api/users/123 pour s'adapter à l’API backend.
            rewrite ^/users(.*)$ /api/users$1 break;

            # Proxy vers l'upstream configuré (load balancing entre plusieurs serveurs).
            proxy_pass http://user_service;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_redirect off;
        }

        # Endpoint par défaut pouvant servir de page d’accueil.
        location / {
            return 200 "Bienvenue sur l'API Gateway!\n";
        }

        # Pages d’erreur personnalisées.
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
